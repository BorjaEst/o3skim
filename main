#!/usr/bin/env python3
"""
o3skim is a tool for data pre-processing of ozone applications
"""
from o3skim import sources, utils
import sys
import argparse
import logging
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)


def cmdline_args():
    p = argparse.ArgumentParser(description=__doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)
    # Arguments
    p.add_argument("-f", "--sources_file", type=str, default="./sources.yaml",
                   help="custom sources YAML configuration (default: %(default)s)")
    p.add_argument("-s", "--split_by", type=str, default=None,
                   choices=['year', 'decade'],
                   help="Period time to split output (default: %(default)s)")
    p.add_argument("-v", "--verbosity", type=str, default='ERROR',
                   choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                   help="Sets the logging level (default: %(default)s)")
    return(p.parse_args())


if __name__ == '__main__':
    args = cmdline_args()

    # Set logging level
    logformat = '%(asctime)s %(name)-16s %(levelname)-8s %(message)s'
    logging.basicConfig(level=getattr(logging, args.verbosity), format=logformat)

    # Configuration load
    logging.info("Lookinf for config at: '%s'", args.sources_file)
    config = utils.load(args.sources_file)

    # Create sources
    logging.info("Loading data from './data' ")
    with utils.cd("data"):
        ds = {name: sources.Source(name, collection) for
              name, collection in config.items()}

    # Skim output
    logging.info("Skimming data to './output' ")
    with utils.cd("output"):
        [source.skim(groupby=args.split_by) for source in ds.values()]
